import { Predicate as Pred, HashMap, AnyFunc } from './types';
export declare function conforms<T>(predmap: {
    [K in keyof T]: Pred<T[K]>;
}): (val: any) => val is T;
export declare function and<T1, T2>(a: Pred<T1>, b: Pred<T2>): Pred<T1 & T2>;
export declare function and<T1, T2, T3>(a: Pred<T1>, b: Pred<T2>, c: Pred<T3>): Pred<T1 & T2 & T3>;
export declare function and<T1, T2, T3, T4>(a: Pred<T1>, b: Pred<T2>, c: Pred<T3>, d: Pred<T3>): Pred<T1 & T2 & T3 & T4>;
export declare function and<T>(...predicates: Pred<any>[]): Pred<T>;
export declare function or<T1, T2>(a: Pred<T1>, b: Pred<T2>): Pred<T1 | T2>;
export declare function or<T1, T2, T3>(a: Pred<T1>, b: Pred<T2>, c: Pred<T3>): Pred<T1 | T2 | T3>;
export declare function or<T1, T2, T3, T4>(a: Pred<T1>, b: Pred<T2>, c: Pred<T3>, d: Pred<T4>): Pred<T1 | T2 | T3 | T4>;
export declare function or<T>(...predicates: Pred<any>[]): Pred<T>;
export declare function not<F extends AnyFunc>(f: F): (...val: Parameters<F>) => boolean;
export declare function isString(value: any): value is string;
export declare function isNumber(value: any): value is number;
export declare function isUndef(value: any): value is undefined;
export declare function isNull(value: any): value is null;
export declare function isVoid(value: any): value is void;
export declare function isBool(value: any): value is boolean;
export declare function isSymbol(value: any): value is symbol;
export declare function isArray<T>(value: T[] | any): value is T[];
export declare function isPlain<T = HashMap>(obj: any | T): obj is T;
export declare function isObject<T extends object>(obj: any | T): obj is T;
export declare function isDate(value: any): value is Date;
export declare function isErr(value: any): value is Error;
export declare function isMap<K, V>(value: any | Map<K, V>): value is Map<K, V>;
export declare function isSet<T>(value: any | Set<T>): value is Set<T>;
export declare function isWeakMap<K extends object, V>(value: any | WeakMap<K, V>): value is WeakMap<K, V>;
export declare function isWeakSet<T extends object>(value: any | WeakSet<T>): value is WeakSet<T>;
export declare function isFunc<T extends AnyFunc>(value: T | any): value is T;
export declare function isEmpty(value: any): boolean;
